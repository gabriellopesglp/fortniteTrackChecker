#!/bin/bash

if ! command -v python3 &> /dev/null; then
    echo "Python3 n√£o encontrado"
    exit 1
fi

if ! command -v curl &> /dev/null; then
    echo "curl n√£o encontrado"
    exit 1
fi

# Configura√ß√µes da API
API_URL="https://fortnite-api.com/v2/shop"
USER_TOKEN="${USER_TOKEN}"  # Ser√° definido como secret
API_TOKEN="${API_TOKEN}"    # Ser√° definido como secret
MUSIC_LIST_FILE="musicas_fortnite.txt"

# Array para armazenar as m√∫sicas a serem monitoradas
declare -a TRACKS_TO_MONITOR

# Fun√ß√£o para carregar a lista de m√∫sicas do arquivo
load_music_list() {
    if [[ -f "$MUSIC_LIST_FILE" ]]; then
        TRACKS_TO_MONITOR=()
        while IFS= read -r line; do
            # Ignorar linhas vazias e coment√°rios
            if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
                TRACKS_TO_MONITOR+=("$line")
            fi
        done < "$MUSIC_LIST_FILE"
        echo "$(date): Carregadas ${#TRACKS_TO_MONITOR[@]} m√∫sicas para monitoramento"
    else
        echo "$(date): Arquivo $MUSIC_LIST_FILE n√£o encontrado"
        exit 1
    fi
}

# Fun√ß√£o para enviar notifica√ß√£o via Pushover
send_notification() {
    local title="$1"
    local message="$2"
    
    if [[ -n "$USER_TOKEN" && -n "$API_TOKEN" ]]; then
        curl -s \
            --form-string "token=$API_TOKEN" \
            --form-string "user=$USER_TOKEN" \
            --form-string "title=$title" \
            --form-string "message=$message" \
            --form-string "priority=0" \
            https://api.pushover.net/1/messages.json > /dev/null
    fi
}

# Fun√ß√£o principal para verificar as m√∫sicas do Fortnite
check_fortnite_tracks() {
    # Carregar lista de m√∫sicas
    if ! load_music_list; then
        echo "Erro ao carregar lista de m√∫sicas"
        return 1
    fi
    
    # Fazer requisi√ß√£o √† API
    response=$(curl -s "$API_URL")
    
    # Verificar se a requisi√ß√£o foi bem-sucedida
    if [[ $? -ne 0 ]]; then
        send_notification "üö® Erro Fortnite Checker" "Erro ao acessar a API do Fortnite"
        echo "$(date): Erro ao acessar API"
        return 1
    fi
    
    # Verificar se h√° dados v√°lidos
    status=$(echo "$response" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('status', 0))")
    
    if [[ "$status" != "200" ]]; then
        send_notification "üö® Erro Fortnite Checker" "API retornou status: $status"
        echo "$(date): API status: $status"
        return 1
    fi
    
    # Extrair e verificar tracks usando Python
    tracks_found=$(echo "$response" | python3 -c "
import sys, json

data = json.load(sys.stdin)
entries = data.get('data', {}).get('entries', [])

for i, entry in enumerate(entries):
    if 'tracks' in entry:
        for track in entry['tracks']:
            title = track.get('title', '')
            artist = track.get('artist', '')
            full_title = f'{artist} - {title}'
            print(f'{full_title}|{artist}|{title}')
")
    
    # Ativar compara√ß√£o case-insensitive
    shopt -s nocasematch
    
    # Verificar se algum track corresponde √† nossa lista
    found_tracks=()
    found_details=()
    
    while IFS='|' read -r full_title artist title; do
        if [[ -n "$full_title" && "$full_title" != *"Total de entries"* && "$full_title" != *"Entry"* ]]; then
            
            for monitor_track in "${TRACKS_TO_MONITOR[@]}"; do
                # Extrair apenas o nome da m√∫sica usando sed para pegar ap√≥s " - " ou " ‚Äì "
                monitor_song=$(echo "$monitor_track" | sed 's/.* [-‚Äì] //')
                
                if [[ "$full_title" == *"$monitor_track"* ]] || [[ "$title" == *"$monitor_song"* ]]; then
                    found_tracks+=("$full_title")
                    found_details+=("$artist - $title")
                    break
                fi
            done
        fi
    done <<< "$tracks_found"
    
    shopt -u nocasematch
    
    # Enviar notifica√ß√£o com resultados
    if [[ ${#found_tracks[@]} -gt 0 ]]; then
        # Criar mensagem com as m√∫sicas encontradas
        if [[ ${#found_tracks[@]} -eq 1 ]]; then
            notification_title="M√∫sica Encontrada no Fortnite!"
        else
            notification_title="${#found_tracks[@]} M√∫sicas Encontradas no Fortnite!"
        fi
        
        # Juntar as m√∫sicas encontradas em uma mensagem
        music_list=$(printf '%s\n' "${found_details[@]}")
        
        # Enviar notifica√ß√£o Pushover
        send_notification "$notification_title" "$music_list"
        
        # Log das m√∫sicas encontradas
        echo "$(date): Encontradas ${#found_tracks[@]} m√∫sicas: ${found_tracks[*]}"
    else
        echo "$(date): Nenhuma m√∫sica da lista encontrada na loja"
    fi
}

# Executar verifica√ß√£o
check_fortnite_tracks
